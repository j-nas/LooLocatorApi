// <auto-generated />
using System;
using LooLocatorApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LooLocatorApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231107035749_snake_case_tables")]
    partial class snake_case_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LooLocatorApi.Models.Bathroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geography (point)")
                        .HasColumnName("coordinates");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accessible");

                    b.Property<bool>("IsChangingTable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_changing_table");

                    b.Property<bool>("IsFamilyFriendly")
                        .HasColumnType("boolean")
                        .HasColumnName("is_family_friendly");

                    b.Property<bool>("IsKeyRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_key_required");

                    b.Property<bool>("IsPurchaseRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_purchase_required");

                    b.Property<bool>("IsUnisex")
                        .HasColumnType("boolean")
                        .HasColumnName("is_unisex");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_name");

                    b.Property<int>("LocationType")
                        .HasColumnType("integer")
                        .HasColumnName("location_type");

                    b.HasKey("Id")
                        .HasName("pk_bathrooms");

                    b.ToTable("bathrooms", (string)null);
                });

            modelBuilder.Entity("LooLocatorApi.Models.CleanlinessRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BathroomId")
                        .HasColumnType("uuid")
                        .HasColumnName("bathroom_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cleanliness_ratings");

                    b.HasIndex("BathroomId")
                        .HasDatabaseName("ix_cleanliness_ratings_bathroom_id");

                    b.ToTable("cleanliness_ratings", (string)null);
                });

            modelBuilder.Entity("LooLocatorApi.Models.CleanlinessRating", b =>
                {
                    b.HasOne("LooLocatorApi.Models.Bathroom", "Bathroom")
                        .WithMany("CleanlinessRatings")
                        .HasForeignKey("BathroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cleanliness_ratings_bathrooms_bathroom_id");

                    b.Navigation("Bathroom");
                });

            modelBuilder.Entity("LooLocatorApi.Models.Bathroom", b =>
                {
                    b.Navigation("CleanlinessRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
